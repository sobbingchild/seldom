# -*- coding: utf-8 -*-
"""
Django settings for demo project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path
from urllib.parse import urlparse

import environ
import pymysql
from apigw_manager.drf.utils import (
    get_default_database_config_dict,
    get_logging_config_dict,
)

# FIXME: comment this in template
from apigw_manager.plugin.config import (
    build_bk_cors,
    build_bk_header_rewrite,
    build_bk_ip_restriction,
    build_bk_rate_limit,
    build_stage_plugin_config_for_definition_yaml,
)

pymysql.install_as_MySQLdb()
# Patch version info to forcedly pass Django client check
pymysql.version_info = 1, 4, 2, "final", 0


# environ
env = environ.Env()
# load environment variables from .env file
environ.Env.read_env()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


def get_env_or_raise(key):
    """Get an environment variable, if it does not exist, raise an exception"""
    value = os.environ.get(key)
    if not value:
        raise RuntimeError(
            (
                'Environment variable "{}" not found, you must set this variable to run this '
                "application."
            ).format(key)
        )
    return value


# 这些变量将由平台通过环境变量提供给应用，本地开发时需手动配置，详见：Python 开发框架使用说明-配置环境变量
APP_CODE = get_env_or_raise("BKPAAS_APP_ID")
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_env_or_raise("BKPAAS_APP_SECRET")

# ONLY FOR LOCAL DEVELOPMENT
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", False)
IS_LOCAL = env.bool("IS_LOCAL", False)

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "drf_spectacular",
    "django_prometheus",
    "apigw_manager.apigw",
    "apigw_manager.drf",
]

MIDDLEWARE = [
    # must be the first middleware
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # must be the last middleware
    "django_prometheus.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

if IS_LOCAL:
    # default use the sqlite3 as the development database, you can change it to other database
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {"default": get_default_database_config_dict(locals())}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = "/tmp"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# DO NOT CHANGE THIS SECTION ！！！（unless you know what the var meaning and what it effect）

# django settings
# if you already have AUTHENTICATION_BACKENDS, delete this line
# otherwise, just keep this line
AUTHENTICATION_BACKENDS = ["django.contrib.auth.backends.ModelBackend"]

# 添加 AUTHENTICATION_BACKENDS
AUTHENTICATION_BACKENDS += [
    "apigw_manager.apigw.authentication.UserModelBackend",
]

# LOGGING
LOG_LEVEL = env.str("BKAPP_LOG_LEVEL", default="ERROR")
if IS_LOCAL:
    LOG_LEVEL = "DEBUG"
    log_dir = BASE_DIR / "logs" / APP_CODE
else:
    log_dir = env.str("LOG_DIR_PREFIX", "/app/v3logs/")
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

LOGGING = get_logging_config_dict(
    log_level=LOG_LEVEL,
    is_local=IS_LOCAL,
    log_dir=log_dir,
    app_code=APP_CODE,
)

# drf settings
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "apigw_manager.drf.authentication.ApiGatewayJWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "apigw_manager.drf.permission.ApiGatewayPermission",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# gateway settings
BK_APP_CODE = env.str("BKPAAS_APP_ID")
BK_APP_SECRET = env.str("BKPAAS_APP_SECRET")
BK_API_URL_TMPL = env.str("BK_API_URL_TMPL")
BK_APIGW_NAME = env.str("BK_APIGW_NAME", default=APP_CODE)
BK_APIGW_DESCRIPTION = f"这是应用 {APP_CODE} 的 API 网关。由网关开发框架自动注册。"
BK_APIGW_DESCRIPTION_EN = (
    f"This is the API Gateway for app {APP_CODE}. Registered automatically by the api gateway development framework."
)

# 网关是否公开，公开则其他开发者可见/可申请权限
BK_APIGW_IS_PUBLIC = str(env.bool("BK_APIGW_IS_PUBLIC", default=True)).lower()
# if BK_APIGW_IS_OFFICIAL is True, the BK_APIGW_NAME should be start with `bk-`
BK_APIGW_IS_OFFICIAL = 1 if env.bool("BK_APIGW_IS_OFFICIAL", default=False) else 10
# 网关管理员，请将负责人加入列表中
BK_APIGW_MAINTAINERS = env.list("BK_APIGW_MAINTAINERS", default=["admin"])

# stage settings

# analysis the app environment and address via bkpaas env vars
bkpaas_default_preallocated_urls = env.json("BKPAAS_DEFAULT_PREALLOCATED_URLS")
bkpaas_environment = env.str("BKPAAS_ENVIRONMENT")
app_address = bkpaas_default_preallocated_urls.get(bkpaas_environment)
parsed_url = urlparse(app_address)
app_scheme = parsed_url.scheme
app_domain = parsed_url.netloc
app_subpath = parsed_url.path.rstrip("/")

BK_APIGW_STAGE_BACKEND_HOST = f"{app_scheme}://{app_domain}"
BK_APIGW_STAGE_BACKEND_SUBPATH = app_subpath

# 网关接口最大超时时间
BK_APIGW_STAG_BACKEND_TIMEOUT = 60

# while deploy app on staging env, it would sync to the stage=stag of the gateway
# while deploy app on production env, it would sync to the stage=prod of the gateway
BK_APIGW_STAGE_NAME = bkpaas_environment
BK_APIGW_STAGE_DESCRIPTION = "生产环境" if bkpaas_environment == "prod" else "预发布环境"
BK_APIGW_STAGE_DESCRIPTION_EN = "Production Env" if bkpaas_environment == "prod" else "Staging Env"
# 声明网关不同环境的环境变量
stag_env_vars = {
    "foo": "bar"
}
prod_env_vars = {
    # "foo": "bar"
}
BK_APIGW_STAGE_ENV_VARS = prod_env_vars if bkpaas_environment == "prod" else stag_env_vars

# 声明网关不同环境的插件配置
# https://github.com/TencentBlueKing/bkpaas-python-sdk/blob/master/sdks/apigw-manager/docs/plugin-use-guide.md
# 注意，这里声明的插件配置会作用在对应环境的所有资源上，所以谨慎声明，确保你知道每个插件配置后产生的影响
stag_plugin_configs = build_stage_plugin_config_for_definition_yaml(
    [
        build_bk_cors(),
        build_bk_header_rewrite(set={"X-Foo": "scope-stage-stag"}, remove=["X-Bar"]),
        build_bk_ip_restriction(blacklist=["192.168.2.1", "192.168.2.2"]),
        build_bk_rate_limit(
            default_period=60,
            default_tokens=1000,
            specific_app_limits=[("demo3", 3600, 1000)],
        ),
    ]
)
prod_plugin_configs = build_stage_plugin_config_for_definition_yaml(
    [
        # build_bk_cors(),
        # build_bk_header_rewrite(set={"X-Foo": "scope-stage-prod"}, remove=["X-Bar"]),
        # build_bk_ip_restriction(blacklist=["192.168.1.1", "192.168.1.2"]),
        # build_bk_rate_limit(
        #     default_period=60,
        #     default_tokens=1000,
        #     specific_app_limits=[("demo2", 3600, 1000)],
        # ),
    ]
)
BK_APIGW_STAGE_PLUGIN_CONFIGS = prod_plugin_configs if bkpaas_environment == "prod" else stag_plugin_configs

# 主动授权，网关主动给应用，添加访问网关所有资源
BK_APIGW_GRANT_PERMISSION_DIMENSION_GATEWAY_APP_CODES = env.list(
    "BK_APIGW_GRANT_PERMISSION_DIMENSION_GATEWAY_APP_CODES", default=[]
)
BK_APIGW_GRANT_PERMISSION_DIMENSION_RESOURCE_APP_CODES = {
    # app_code: [resource_name1, resource_name2]
    "demo": ["v1_demo"],
}
# release settings
# YOU CAN CHANGE THE RELEASE INFO, use env vars or just change the default below
# 1.0.0+stag or 1.0.0+prod
BK_APIGW_RELEASE_VERSION = (
    # NOTE: 每次部署必须强制版本号变更，否则代码变更版本号不变，不会打出新版本
    # log: resource_version 1.0.3+stag already exists, skip creating
    env.str("BK_APIGW_RELEASE_VERSION", default="1.0.0") + "+" + BK_APIGW_STAGE_NAME
)


BK_APIGW_RELEASE_TITLE = env.str("BK_APIGW_RELEASE_TITLE", default=f"gateway release(stage={BK_APIGW_STAGE_NAME})")
BK_APIGW_RELEASE_COMMENT = env.str(
    "BK_APIGW_RELEASE_COMMENT",
    default=f"auto release by bk-apigw-plugin-runtime(stage={BK_APIGW_STAGE_NAME})",
)

# 网关同步 API 文档语言, zh/en, 如果配置了BK_APIGW_RESOURCE_DOCS_BASE_DIR（使用自定义文档）, 那么必须将这个变量置空
BK_APIGW_RELEASE_DOC_LANGUAGE = env.str("BK_APIGW_RELEASE_DOC_LANGUAGE", default="")
# 在项目 docs目录下，通过 markdown文档自动化导入中英文文档; 注意markdown文件名必须等于接口的 operation_id; 见 demo 示例
BK_APIGW_RESOURCE_DOCS_BASE_DIR = env.str("BK_APIGW_RESOURCE_DOCS_BASE_DIR", default=BASE_DIR / "docs")

# drf_spactacular settings
SPECTACULAR_SETTINGS = {
    "TITLE": BK_APIGW_NAME,
    "DESCRIPTION": BK_APIGW_DESCRIPTION,
    "VERSION": BK_APIGW_RELEASE_VERSION,
    "SERVE_INCLUDE_SCHEMA": False,
    # OTHER SETTINGS
}
# DO NOT CHANGE THIS SECTION ！！！（unless you know what the var meaning and what it effect）
